import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_cache_manager/flutter_cache_manager.dart';
import 'dart:developer' as developer;

/// Servicio para gestionar la cach√© de im√°genes de la aplicaci√≥n
class ImageCacheService {
  /// Singleton instance
  static final ImageCacheService _instance = ImageCacheService._internal();

  /// Factory constructor para obtener la instancia singleton
  factory ImageCacheService() => _instance;

  /// Constructor interno privado
  ImageCacheService._internal();

  /// Clave para almacenar la √∫ltima limpieza de cach√©
  static const String _lastCacheClearKey = 'last_image_cache_clear';

  /// Flag para debugging
  static const bool _debugMode = true;

  /// Limpia la cach√© de im√°genes si es necesario
  Future<void> clearCacheIfNeeded() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastClearTime = prefs.getInt(_lastCacheClearKey);

      final now = DateTime.now().millisecondsSinceEpoch;
      final clearInterval =
          const Duration(days: 3).inMilliseconds; // Reducido a 3 d√≠as

      // Log de memoria inicial
      _logMemoryUsage('Before cache check');

      // Si nunca se ha limpiado o han pasado m√°s de 3 d√≠as
      if (lastClearTime == null || (now - lastClearTime) > clearInterval) {
        await clearCache();
        await prefs.setInt(_lastCacheClearKey, now);
        debugPrint('‚úÖ Cach√© de im√°genes limpiada autom√°ticamente');

        // Log de memoria despu√©s de limpiar
        _logMemoryUsage('After cache cleaning');
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error al verificar limpieza de cach√©: $e');
    }
  }

  /// Limpia toda la cach√© de im√°genes
  Future<bool> clearCache() async {
    try {
      debugPrint('üßπ Iniciando limpieza de cach√© de im√°genes...');

      // Limpiar la cach√© de im√°genes en memoria de Flutter
      PaintingBinding.instance.imageCache.clear();

      // Tambi√©n limitar el tama√±o despu√©s de limpiar
      PaintingBinding.instance.imageCache.maximumSizeBytes =
          20 * 1024 * 1024; // 20 MB
      PaintingBinding.instance.imageCache.maximumSize = 50;

      // Limpiar cach√© de CachedNetworkImage
      await CachedNetworkImage.evictFromCache(
        '',
        cacheManager: DefaultCacheManager(),
      );

      // Limpiar la cach√© de im√°genes en disco
      await DefaultCacheManager().emptyCache();

      // Intentar forzar la recolecci√≥n de basura
      debugPrint('üßπ Cach√© limpiada, pidiendo recolecci√≥n de basura...');

      debugPrint('‚úÖ Cach√© de im√°genes limpiada completamente');
      return true;
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error al limpiar cach√© de im√°genes: $e');
      return false;
    }
  }

  /// Configura el tama√±o m√°ximo de la cach√© de im√°genes en memoria
  /// Esto ayuda a reducir el consumo de memoria sin afectar el aspect ratio
  void configureImageCache({
    int maxSizeBytes = 30 * 1024 * 1024,
    int maxImages = 50,
  }) {
    try {
      // Configurar el tama√±o m√°ximo de la cach√© de im√°genes en memoria
      final imageCache = PaintingBinding.instance.imageCache;

      // Obtener tama√±o actual para logging
      final currentSize = imageCache.currentSize;
      final currentSizeBytes = imageCache.currentSizeBytes;

      // Aplicar nuevos l√≠mites
      imageCache.maximumSizeBytes = maxSizeBytes;
      imageCache.maximumSize = maxImages;

      debugPrint('üìä Estad√≠sticas de cach√© antes de configuraci√≥n:');
      debugPrint('- Im√°genes en cach√©: $currentSize');
      debugPrint(
        '- Bytes en cach√©: ${(currentSizeBytes / (1024 * 1024)).toStringAsFixed(2)} MB',
      );

      debugPrint('‚úÖ Configuraci√≥n de cach√© aplicada:');
      debugPrint('- L√≠mite de im√°genes: $maxImages');
      debugPrint(
        '- L√≠mite de memoria: ${(maxSizeBytes / (1024 * 1024)).toStringAsFixed(2)} MB',
      );

      // Log de memoria
      _logMemoryUsage('After cache configuration');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error al configurar cach√© de im√°genes: $e');
    }
  }

  /// Obtiene el tama√±o aproximado de la cach√©
  Future<String> getCacheSize() async {
    try {
      // Obtener informaci√≥n de la cach√© de im√°genes en memoria de Flutter
      final imageCache = PaintingBinding.instance.imageCache;
      final memoryCacheSize = imageCache.currentSizeBytes / (1024 * 1024);

      // Log de memoria
      _logMemoryUsage('When checking cache size');

      return '${memoryCacheSize.toStringAsFixed(2)} MB en memoria';
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error al obtener tama√±o de cach√©: $e');
      return 'Desconocido';
    }
  }

  /// Precarga una imagen para que est√© disponible en cach√©
  Future<void> preloadImage(
    String imageUrl,
    BuildContext context, {
    String? cacheKey,
    int? width,
    int? height,
  }) async {
    try {
      final provider = CachedNetworkImageProvider(
        imageUrl,
        cacheKey: cacheKey ?? imageUrl,
        maxWidth: width,
        maxHeight: height,
      );

      // Usar la funci√≥n de Flutter para precarga
      await precacheImage(provider, context);
      debugPrint('‚úÖ Imagen precargada: $imageUrl');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error al precargar imagen: $e');
    }
  }

  /// Registra uso de memoria (solo en modo debug)
  void _logMemoryUsage(String point) {
    if (!_debugMode) return;

    try {
      debugPrint('üìä MEMORY USAGE ($point):');
      // En Flutter web esto mostrar√° informaci√≥n de memoria. En apps nativas solo para debug
      developer.log('Memory usage at $point', name: 'ImageCacheService');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error logging memory: $e');
    }
  }
}
